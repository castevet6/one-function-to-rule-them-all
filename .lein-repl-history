(cons 1 (cons 2 (cons 3 nil)))
(cons 1 (cons 2 (cons 3 '())))
(defn sum [x & xs]
  (if (empty? x)
    0
(defn sum
  [] 0
  [x] x
  [x & xs] (+ x (sum xs)
)
(defn sum
  ([] 0)
  ([x] x)
  ([x & xs] (+ x (sum xs))))
(sum [])
(reduce + [1 2 3])
(reduce first [[1 2 3] [4 5 6] [7 8 9]])
(reduce conj #{} [:a :b :c :d :e :a :b :a])
[1 2 9 4 8 3 0 20 01]
(doc rand-int)
(take 10 (repeatedly #(rand-int 42)))
(def rands (take 10 (repeatedly #(rand-int 10))))
rands
(doc repeatedly)
rand-int 10
((fn [x] rand-int x) 10)
(let [rand (fn [x] rand-int x)]
  (rand 10))
(let [rand (fn [x] rand-int x)]
  (rand 10))
(rand-int 10)
(let [rand (fn [x] (rand-int x))]
  (rand 10))
(let [rand (fn [x] (rand-int x))]
  (rand 10))
(take 10 (repeatedly #(rand-int 100)))
rands
(def rands (take 100 (repeatedly #(rand-int 100))))
(reduce conj #{} rands)
(cound (reduce conj #{} rands))
(count (reduce conj #[{} rands))
(count (reduce conj #{} rands))
(count (reduce conj #{} (take 100 #(rand-int 100))))
(reduce conj #{} (take 100 (repeatedly #(rand-int 100))))
(count (reduc conj #{} (take 100 (repeatedly #(rand-int 100)))))
(count (reduce conj #{} (take 100 (repeatedly #(rand-int 100)))))
(count (reduce conj #{} (take 50 (repeatedly #(rand-int 100)))))
(take 100 (count (reduce conj #{} (take 50 (repeatedly #(rand-int 100))))))
(defn generate-rands [n]
u
=)
(defn generate-rand-ints
)
(defn generate-rand-ints [n k]
  (take n (repeatedly #(rand-int k))))
(generate-rand-ints 100 100)
(reduce + [])
(+ 1)
(+ 2)
(reduce concat [1 2] [3 4])
(reduce concat [[1 2] [3 4]])
(reduce concat [])
(:use 'one-function-to-rule-them-all :reload-all)
(concat-elements [[1 2] [3 4]])
(:use 'one-function-to-rule-them-all :reload-all)
(concat-elements [[1 2] [3 4]])
(:use 'one-function-to-rule-them-all :reload-all)
(concat-elements [[1 2] [3 4]])
(:use 'one-function-to-rule-them-all :reload-all)
(concat-elements [[1 2] [3 4]])
quit
(use 'one-function-to-rle-them-all :reload-all)
:q
(use 'one-function-to-rule-them-all :reload-all)
(concat-elements [[1 2] [3 4]])
(intersperse " " "lafkjdsal")
(interpose " " "adlskjfdsa")
(concat (interpose " " ["ljfad" "ldaj" "ldkafjda"]))
(interpose " " ["aa" "bb" "cc"])
(reduce concat (interpose " " ["aa" "bb" "cc"]))
(str (reduce concat (interpose " " ["aa" "bb" "cc"])))
(apply str (reduce concat (interpose " " ["aa" "bb" "cc"])))
(use 'one-function-to-rule-them-all :reload-all)
(str-cat ["aa" "bb" "cc"])
(str-cat ["I" "am" "Legend"])
(str-cat ["I "am" "back"])
)
"
)
(str-cat ["I" "am" "back"])
(str-cat ["more" " " "space"])
(str-cat [])
(conj [1 2 3] 2 3)
(conj [5 5 5] 0 3)
(conj [5 5 5] 3 0)
(doc conj)
(conj [1 3 3] 1)
(def mylist [1 2 3 4])
(let [[x & xs] mylist]
  (println x " - " xs))
(conj [1 2 3] ())
(conj [1 2 3] '()]
(doc reduce)
(reduce conj [] [1 2 3])
(reduce (fn [n] (conj n "*")) [1 2 3])
(reduce (fn [r x] (conj r x "*")) [1 2 3])
(reduce (fn [r x] (conj r x) [1 2 3]))
(reduce (fn [r x] (conj r x)) [1 2 3])
(reduce (fn [r x] (conj r x)) [] [1 2 3])
(reduce (fn [r x] (conj r x "*")) [] [1 2 3])
(drop-last (reduce (fn [r x] (conj r x "*")) [1 2 3]))
(reduce (fn [r x] (conj r x "*")) [1 2 3])
